<ActivityStreamModel description="Injecting real time data observations for month November 1st to 24th, where Ozono is the value to predict (included in this data to do also deviation check)" name="Real Time Air Quality November Data by Area" timezone="Europe/Brussels" daylight="false" live="true">
  <ModelInfo validated="true">
    <Source>
      <DataSource type="FileSource">
        <property label="File Path" type="string" name="file" desc="The log4j main log file path" value="E:\DEMOS\IoT Air Quality\Datasets\actual_november_2015_with_Ozone_comma_separator.csv" oldvalue="E:\DEMOS\IoT Air Quality\Datasets\actual_november_2015_with_Ozone_comma_separator.csv"/>
        <property optional="true" label="Rollover File Pattern" type="string" name="rolloverPattern" desc="The log4j rollover file name pattern. It is a wildcard pattern that supports &apos;*&apos; and &apos;?&apos;. If it is not defined, it will be the file name suffixed with *, by default."/>
        <property optional="true" label="Ignore First Line" type="boolean" value="false" name="ignoreFirstLine" desc="If it is set to true, the first line event of the file will be ignored"/>
        <property constraints="encoding" optional="true" label="File Encoding" type="string" value="utf-8" name="fileEncoding" desc="The file encoding"/>
        <property hidden="false" description="Whether to support Multi Line Event" label="Multi Line Event" type="boolean" value="false" name="multiline" desc="Whether to support Multi Line Event"/>
        <property controlName="multiline" contorlValue="true" description="Whether to support Nested Delimiter" label="Nested Delimiter" type="boolean" value="false" name="nesteddel" desc="Whether to support Nested Delimiter"/>
        <property controlName="multiline" contorlValue="true" optional="true" description="Max Number of Characters in Event" label="Max Event Length" type="number" value="1000" name="maxCharacterNum" desc="Max Number of Characters in Event" numberType="int"/>
        <property controlName="multiline" contorlValue="true" description="Case Sensitive of Delimiters" label="Case Sensitive" type="boolean" value="true" name="caseSensitive" desc="Case Sensitive of Delimiters"/>
        <property controlName="multiline" contorlValue="true" optional="true" label="Keep CRLF" type="boolean" value="false" name="keepcrlf" desc="Whether preserve CRLF in the event during runtime"/>
        <property constraints="xmlMap(columnlabel1:Start, columnlabel2:End)" controlName="multiline" contorlValue="true" optional="true" description="The Special Literal Pair" label="Special Literal" type="xmldom" name="specialLiteral" desc="The start and end Special Literal Pair"/>
        <property controlName="multiline" contorlValue="true" optional="true" description="The start Comment String" label="Start Comment" type="string" name="startComment" desc="The start Comment String"/>
        <property controlName="multiline" contorlValue="true" optional="true" description="The end Comment String" label="End Comment" type="string" name="endComment" desc="The end Comment String"/>
        <property controlName="multiline" contorlValue="true" optional="true" label="Escaped Character" type="string" name="escapedCharacter" desc="The Escaped Character when search Special Literal and Comment"/>
        <property controlName="multiline" contorlValue="true" label="Start Delimiter" type="boolean" value="true" name="hasStartdel" desc="Select True if need Start Delimiter"/>
        <property controlName="hasStartdel" contorlValue="true" optional="true" label="Delimiter String" type="string" name="startdel" desc="Start Delimiter String"/>
        <property controlName="hasStartdel" contorlValue="true" description="Include Start Delimiter in Event" label="Include" type="boolean" value="true" name="startdelInclude" desc="Include Start Delimiter in Event"/>
        <property controlName="hasStartdel" contorlValue="true" description="Support regular expression as Start Delimiter" label="Regular Expression" type="boolean" value="false" name="startdelReg" desc="Support regular expression as Start Delimiter"/>
        <property controlName="multiline" contorlValue="true" label="End Delimiter" type="boolean" value="true" name="hasEnddel" desc="Select True if need End Delimiter"/>
        <property controlName="hasEnddel" contorlValue="true" optional="true" label="Delimiter String" type="string" name="enddel" desc="End Delimiter String"/>
        <property controlName="hasEnddel" contorlValue="true" description="Include End Delimiter in Event" label="Include" type="boolean" value="true" name="enddelInclude" desc="Include End Delimiter in Event"/>
        <property controlName="hasEnddel" contorlValue="true" description="Support regular expression as End Delimiter" label="Regular Expression" type="boolean" value="false" name="enddelReg" desc="Support regular expression as End Delimiter"/>
      </DataSource>
      <Filter type="expression">
        <property name="filter-operation" type="string" value="RegExp"/>
        <property name="filter-argument" type="string" value=""/>
      </Filter>
    <Samples type="acquire">
      <Sample name="" label="* Source Definition" payloadId="SOURCE" fileName="vt1494496854075" mimeType="txt">
        <Param name="file" label="undefined" value="sample###txt###0" type="file"/>
      </Sample>
    </Samples>
      <Parser name="RConverter">
        <Component type="RConverter" category="converter">
          <properties>
            <property type="string" value="csv" label="Input Type" desc="Input type of the converter" name="inputFormat" optional="true" enums="csv=CSV,xml=XML,json=JSon,,,,"/>
            <property type="boolean" value="true" label="Header Row" desc="Specify whether to consider the first row as a header." name="headerRow" optional="true" contorlValue="csv" controlName="inputFormat"/>
            <property type="string" value="," label="Delimiter" desc="The delimiter used to split strings into fields." name="delimiter" optional="true" enums="comma=Comma Separated,tab=Tab Delimited,,,," contorlValue="csv" controlName="inputFormat" enumDyn="true"/>
            <property type="string" value="Area,Date,Latitude,Longitude,TIN,NO,NO2,PM10,O3,VV,DV,Tmp,HR,Pre,RS,Llu" label="Field Names" desc="Optional comma-separated list of field names." name="fieldNames" constraints="((([a-zA-Z][a-zA-Z0-9_]*)|([a-zA-Z][a-zA-Z0-9_]*:[a-zA-Z]+)),)*((([a-zA-Z][a-zA-Z0-9_]*)|([a-zA-Z][a-zA-Z0-9_]*:[a-zA-Z]+)))?" optional="true" contorlValue="csv" controlName="inputFormat"/>
            <property type="string" label="XPath" desc="XPath for Array node in XML like &apos;/Orders/Order&apos;. Namespace insensitive. Or parent node for fields." name="xpath" optional="true" contorlValue="xml" controlName="inputFormat"/>
            <property type="string" label="JSONPath" desc="Path for array nodes in JSON like &apos;Orders.Order&apos;. &apos;.&apos; means the root is Array like [{},{}], or parent node for fields." name="jpath" optional="true" contorlValue="json" controlName="inputFormat"/>
            <property type="string" value="Area=integer,Date=string,Latitude=string,Longitude=string,TIN=double, NO*=double,PM10=double,O3=double,VV=double,DV=double,Tmp=double,HR=double,RS=double, Llu=double" label="Field Types" desc="Specify field types like &apos;UUID=string,D*=double&apos;" name="fieldTypes" optional="true"/>
            <property type="xmldom" label="Attachment" desc="Uploaded files. Use file in R code by &apos;converter$context$fileName&apos;" name="attachment" constraints="file(multiple:true,limitedSize:predictive|max.r.attachment)" optional="true"><file>
  <uri name="Random_Forest_Ozone_Model" file="Random_Forest_Ozone_Model.rda" date="11/30/15 01:12 PM" uuid="file-e44bb26c-d204-4469-8486-33b7af5b67ba_0"/>
</file></property>
            <property type="string" label="R Script" desc="Script content" name="script" constraints="script(scriptMode:r,helpContent:flow/help/scripts/RScript.json,funcArgs:context,bodyTemplate:flow/help/scripts/RScriptTemplate.R)"><![CDATA[  constructor <- function(context) {
    converter <- list();
    converter$context <- context;
    return(converter)
  }
  converter <- constructor(context)
  #
  # initialize the converter like loading training model
  #
  converter$init <- function() {
    library(randomForest)  # Loading R Libraries
    load(context$Random_Forest_Ozone_Model) # Loading Model
    converter$model <<- air.rf
   # print("init");
  }
  #
  # process input events, like predict or enrich
  #
  converter$process <- function(event) {
    # add more codes here
	# print("process");
    # return(event)
    ozono.prob <- predict(converter$model,newdata=event)
    #ts <- format(Sys.time(), "%a %b %d %X %Y")
    ts <- format(as.POSIXlt(Sys.time()))
    O3_Deviation <- event$O3 - ozono.prob
    #result <- cbind(Timestamp=ts,Actual=event$O3,Predicted=round(ozono.prob,2), Deviation=round(O3_Deviation,2) )
    # Converting Area to String
    if (event$Area == 1 ) { area = "Getafe" }
    else { area = "Alcobendas"}
    
    result <- cbind(
                Area=toString(area),
                Timestamp=toString(event$Date),
                Latitude=toString(event$Latitude), 
                Longitude=toString(event$Longitude),
                Actual=event$O3,
                Predicted=round(ozono.prob,2), 
                Deviation=round(O3_Deviation,2),
                toString(event$TIN),
                toString(event$NO),
                toString(event$NO2),
                toString(event$PM10),
                toString(event$O3),
                toString(event$VV),
                toString(event$DV),
                toString(event$Tmp),
                toString(event$HR),
                toString(event$Pre),
                toString(event$RS),
                toString(event$Llu)
                )
    colnames(result) <- c("Area","Timestamp","Latitude","Longitude","Actual","Predicted", "Deviation","TIN","NO","NO2","PM10","O3","VV","DV","Tmp","HR","Pre","RS","Llu")
    #result <- cbind(Timestamp=ts,Predicted=round(ozono.prob,2))
    #colnames(result) <- c("Timestamp","Predicted")
    print(result)
    return(result)
  }
  #
  # terminate the converter
  #
  converter$destroy <- function() {   
	  print("destroy");
  }
  return(converter)
]]></property>
            <property type="number" value="300" label="Timeout(s)" desc="Connection timeout in seconds." name="timeout" constraints="min=1, max=9999" optional="true" numberType="int"/>
            <property type="string" value="xml" label="Output Type" desc="Output type of the converter" name="outputFormat" enums="csv=CSV,xml=XML,json=JSon,,,,"/>
            <property hidden="true" type="string" value="dataType,constraints" label="" desc="" name="disableColumns"/>
            <property type="boolean" value="false" label="Disable QoS" desc="QoS will monitor that n input events will produce n output events. If output event count is different from input event count in R script, please turn it on." name="oneToOne" optional="true"/>
          </properties>
        </Component>
        <Mapping type="auto" namespace="http://as" root="SourceEvent" prefix="n">
          <group id="/event" label="event/" name="event">
            <field id="/event/Area" label="Area" name="Area" value="Getafe" type="integer"/>
            <field id="/event/Timestamp" label="Timestamp" name="Timestamp" value="01/11/2015" type="string"/>
            <field id="/event/Latitude" label="Latitude" name="Latitude" value="40.308136" type="integer"/>
            <field id="/event/Longitude" label="Longitude" name="Longitude" value="-3.73446" type="integer"/>
            <field id="/event/Actual" label="Actual" name="Actual" value="58" type="integer"/>
            <field id="/event/Predicted" label="Predicted" name="Predicted" value="38.18" type="integer"/>
            <field id="/event/Deviation" label="Deviation" name="Deviation" value="19.82" type="string"/>
            <field id="/event/TIN" label="TIN" name="TIN" value="19.8" type="string"/>
            <field id="/event/NO" label="NO" name="NO" value="2" type="integer"/>
            <field id="/event/NO2" label="NO2" name="NO2" value="11" type="integer"/>
            <field id="/event/PM10" label="PM10" name="PM10" value="16" type="integer"/>
            <field id="/event/O3" label="O3" name="O3" value="58" type="integer"/>
            <field id="/event/VV" label="VV" name="VV" value="1.9" type="string"/>
            <field id="/event/DV" label="DV" name="DV" value="113" type="integer"/>
            <field id="/event/Tmp" label="Tmp" name="Tmp" value="15.1" type="string"/>
            <field id="/event/HR" label="HR" name="HR" value="59" type="integer"/>
            <field id="/event/Pre" label="Pre" name="Pre" value="948.00" type="integer"/>
            <field id="/event/RS" label="RS" name="RS" value="83" type="integer"/>
            <field id="/event/Llu" label="Llu" name="Llu" value="0" type="integer"/>
          </group>
        </Mapping>
      </Parser>
    </Source>
    <MappingPaths>
     <path value="/event" label="event/"/>
     <path value="/event/Area" label="Area"/>
     <path value="/event/Timestamp" label="Timestamp"/>
     <path value="/event/Latitude" label="Latitude"/>
     <path value="/event/Longitude" label="Longitude"/>
     <path value="/event/Actual" label="Actual"/>
     <path value="/event/Predicted" label="Predicted"/>
     <path value="/event/Deviation" label="Deviation"/>
     <path value="/event/TIN" label="TIN"/>
     <path value="/event/NO" label="NO"/>
     <path value="/event/NO2" label="NO2"/>
     <path value="/event/PM10" label="PM10"/>
     <path value="/event/O3" label="O3"/>
     <path value="/event/VV" label="VV"/>
     <path value="/event/DV" label="DV"/>
     <path value="/event/Tmp" label="Tmp"/>
     <path value="/event/HR" label="HR"/>
     <path value="/event/Pre" label="Pre"/>
     <path value="/event/RS" label="RS"/>
     <path value="/event/Llu" label="Llu"/>
    </MappingPaths>
    <GlobalProperties>
    </GlobalProperties>
    <DeletedNamespaces>
    </DeletedNamespaces>
    <UserSchemas>
    </UserSchemas>
        <View name="Default" desc="">
        <Rule type="PerEvent"/>
        <Filters type="expression" relation="AND">
        </Filters>
        <Mapping output="xml" type="auto">
        </Mapping>
        <Targets>
           <Target name="DB_Ozone_Predictions" type="DatabaseTarget">
             <property type="string" value="datasource" label="Connection Type" desc="The method to get database connection." name="connectionType" description="The method to find connection" enums="datasource=DataSource,jdbc=JDBC," driveDynProp="tableName"/>
             <property hidden="true" type="string" value="/vitria/m3o/datasource/DefaultDomain/defaultds" label="DataSource Name" desc="" name="datasourceName" optional="true" contorlValue="datasource" controlName="connectionType" driveDynProp="tableName"/>
             <property type="string" value="com.mysql.jdbc.Driver" label="Driver Class Name" desc="The class name of the database driver." name="driverClass" optional="true" contorlValue="jdbc" controlName="connectionType"/>
             <property type="string" value="jdbc:mysql://localhost:3306/schemaName" label="Connection URL" desc="The url to the database, like jdbc:mysql://localhost:3306/schemaName" name="connectionURL" optional="true" contorlValue="jdbc" controlName="connectionType" driveDynProp="tableName"/>
             <property type="string" value="" label="Username" desc="The user name to connect with." name="username" optional="true" contorlValue="jdbc" controlName="connectionType" driveDynProp="tableName"/>
             <property type="string" value="" label="Password" desc="The password for the user." name="password" constraints="password" optional="true" contorlValue="jdbc" controlName="connectionType" driveDynProp="tableName"/>
             <property type="string" value="ozono_air_quality_prediction_lat_lon" label="Table Name" desc="The table name" name="tableName" description="The table name" optional="true" enumSource="rest:/projtable?op=listtables&amp;connecttype=${connectionType}&amp;datasource=${datasourceName}&amp;connectionURL=${connectionURL}&amp;driverClass=${driverClass}&amp;username=${username}&amp;password=${password}&amp;vitria.filter=true" driveDynProp="updateKey" restDyn="true"/>
             <property type="string" value="insert" label="Operation" desc="The operations on the table." name="operation" description="The operations on the table" enums="insert=Always Insert, insertupdate=Insert or Update," driveDynProp="updateKey"/>
             <property type="string" value="" label="Unique Columns" desc="The columns to identify the unique row, update it if exists." name="updateKey" optional="true" enumSource="rest:/projtable?op=listcolumns&amp;connecttype=${connectionType}&amp;datasource=${datasourceName}&amp;connectionURL=${connectionURL}&amp;driverClass=${driverClass}&amp;username=${username}&amp;password=${password}&amp;table=${tableName}" contorlValue="insertupdate" controlName="operation" restDyn="true" oldvalue="" decription="The columns to identify the unique row, update it if exists" multiple="true"/>
             <property type="boolean" value="true" label="Truncate Table When Purge" desc="Whether to truncate table when purging project." name="truncateTableWhenPurge" optional="true" decription="Whether to truncate table when purging project"/>
             <property hidden="true" type="string" label="Last Update Column Name" desc="The name of the column to record last update time." name="lastUpdateColumn" description="The name of the column to record last update time" optional="true"/>
             <property hidden="true" type="boolean" value="false" label="Auto Generate" desc="Whether the table is auto created." name="autoGenerate" description="Whether the table is auto created" optional="true"/>
             <property hidden="true" type="xmldom" label="Table Schema" desc="The schema for auto-generated table." name="tableSchema" description="The schema for auto-generated table" constraints="xmlMap" optional="true"/>
             <property hidden="true" type="boolean" value="true" label="" desc="" name="is_transactional" description="The internal property used by target framework" optional="true"/>
             <property type="boolean" value="false" label="Remove Wrapper" name="remove_event_wrapper"/>
             <property type="boolean" value="false" label="Parse to String" name="###parse_to_string###"/>
             <Mapping output="xml" type="auto" input="xml">
             </Mapping>
           </Target>
        </Targets>
    </View>
    <DeploymentSetting>
      <ServerTag value=""/>
      <DataSource value="/vitria/m3o/datasource/DefaultDomain/defaultds"/>
      <QOS value="0"/>
      <AdvancedProperties>
        <property componentType="FileSource" batch_size="1000" dataflow_throttling_policy="slowdown" batch_time="200" modelComponentType="FileSource" componentGroup="Source" componentCategory="source" componentName="AS_Source_Source" enable_monitor="true" dataflow_eps_limit="-1" poll_rate="1000"/>
        <property componentType="RConverter" dataflow_throttling_policy="slowdown" buffer_size="1000" modelComponentType="RConverter" componentGroup="" componentCategory="converter" componentName="AS_Source_Converter" enable_monitor="true" dataflow_eps_limit="-1" concurrency="0"/>
        <property componentType="DB_Ozone_Predictions/DatabaseTarget" entry="Default/DB_Ozone_Predictions" batch_size="-1" dataflow_throttling_policy="slowdown" buffer_size="1000" batch_time="-1" modelComponentType="DatabaseTarget" componentGroup="Default" componentCategory="target" componentName="AS_Views_Default_Targets_DB_Ozone_Predictions_Target" enable_monitor="true" dataflow_eps_limit="-1"/>
      </AdvancedProperties>
      <ExceptionCondition act="skip" logException="true" logEvent="true">
        <Source retry="5" delay="5" timeunit="second"/>
        <Target retry="5" delay="5" timeunit="second"/>
      </ExceptionCondition>
    </DeploymentSetting>
  </ModelInfo>
</ActivityStreamModel>